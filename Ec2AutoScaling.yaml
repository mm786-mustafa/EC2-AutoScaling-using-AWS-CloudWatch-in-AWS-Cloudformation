AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'

Description: Deploying Wordpress on EC2 instance and connecting with RDS database using Cloudformation.

# ** Parameters **
Parameters:
  Environment:
    Description: Select deployment environment of your choice
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - testing
    - production

  VpcName:
    Description: Specified the name for VPC
    Type: String
    Default: mustafa-vpc

  VpcCIDR:
    Description: IP Range for VPC
    Type: String
    Default: 10.0.0.0/16

  InternetGatewayName:
    Description: Name of custom internet gateway.
    Type: String
    Default: mustafa-igw

  NatGatewayName:
    Description: Name of custom NAT gateway.
    Type: String
    Default: mustafa-ngw

  PublicRouteTableName:
    Description: Name of public route table.
    Type: String
    Default: mustafa-public-RT

  PublicRoute1CIDR:
    Description: CIDR block for destination.
    Type: String
    Default: 0.0.0.0/0

  PrivateRouteTableName:
    Description: Name of private route table.
    Type: String
    Default: mustafa-private-RT

  PrivateRoute1CIDR:
    Description: CIDR block for destination.
    Type: String
    Default: 0.0.0.0/0

  PublicSubnetName:
    Description: Name of public subnet
    Type: String
    Default: mustafa-public-subnet

  PrivateSubnetName:
    Description: Name of public subnet
    Type: String
    Default: mustafa-private-subnet

  HttpAccessCidr:
    Description: The CIDR block range that will be allowed for HTTP access.
    Type: String
    Default: "0.0.0.0/0"

  SecurityGroupName:
    Description: Name of the Security Group
    Type: String
    Default: mustafa-sg

  KeyName:
    Description: Name of existing EC2 keypair.
    Type: AWS::EC2::KeyPair::KeyName
    Default: mustafa-california-key

  RdsInstanceName:
    Description: Name of the RDS instance
    Type: String
    Default: mustafa-db

  DatabaseName:
    Description: Name of the database
    Type: String
    Default: wordpress

  DatabaseUsername:
    Description: Username required for the database
    Type: String
    Default: m_mustafa

  DatabaseUserPassword:
    Description: Password required for the database
    Type: String
    Default: no1knows786

  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated storage for the RDS instance.

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: Instance class for the RDS instance.

  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Select AZs to include in list

  TargetGroupName:
    Type: String
    Default: mustafa-tg
    Description: Name of target group

  LoadBalancerName:
    Type: String
    Default: mustafa-lb
    Description: Name of load balancer

  LaunchTempName:
    Type: String
    Default: 'mustafas-launch-temp'
    Description: Name of ec2 launch template

  AutoScalingName:
    Type: String
    Default: mustafa-asg
    Description: Name of autoscaling group

# ** Mappings **
Mappings:
  EnvironmentConfig:
    dev:
      InstanceType: t2.micro
      ami: ami-018a1ea25ff5268f0
    testing:
      InstanceType: t2.micro
      ami: ami-08d4f6bbae664bd41
    production:
      InstanceType: t2.micro
      ami: ami-0810e059735ce3a9d

  CidrIndexPublicSubnets:
    us-west-1a:
      Index: "0"
    us-west-1c:
      Index: "1"

  CidrIndexPrivateSubnets:
    us-west-1a:
      Index: "2"
    us-west-1c:
      Index: "3"

# ** Resources **
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${VpcName}-${AWS::Region}"

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${InternetGatewayName}-${AWS::Region}"

  AttachVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref MyPublicSubnetuswest1a
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${NatGatewayName}-${AWS::Region}"

  'Fn::ForEach::CreatingPublicSubnets':
  - AZ
  - !Ref AvailabilityZones
  - 'MyPublicSubnet&{AZ}':
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: !Select
          - !FindInMap [ CidrIndexPublicSubnets, !Sub "${AZ}", Index ]
          - !Cidr
            - !Ref VpcCIDR
            - 4
            - 8
        AvailabilityZone: !Sub "${AZ}"
        Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref PublicSubnetName, !Sub "${AZ}" ] ]
    # Route Table Association
    'MyPublicSubnet&{AZ}RouteTableAssociation':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          #'MyPublicSubnet&{AZ}'
          !Ref
          Fn::Join:
          - ""
          - - "MyPublicSubnet"
            - Fn::Join:
              - ""
              # Removing the hyphen from the AZ name and then joining with the subnet name
              - - !Select
                  - 0
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
                - !Select
                  - 1
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
                - !Select
                  - 2
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
        RouteTableId: !Ref MyPublicRouteTable

  'Fn::ForEach::CreatingPrivateSubnets':
  - AZ
  - !Ref AvailabilityZones
  - 'MyPrivateSubnet&{AZ}':
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: !Select
          - !FindInMap [ CidrIndexPrivateSubnets, !Sub "${AZ}", Index ]
          - !Cidr
            - !Ref VpcCIDR
            - 4
            - 8
        AvailabilityZone: !Sub "${AZ}"
        Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref PrivateSubnetName, !Sub "${AZ}" ] ]
    # Route Table Association
    'MyPrivateSubnet&{AZ}RouteTableAssociation':
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          #'MyPrivateSubnet&{AZ}'
          !Ref
          Fn::Join:
          - ""
          - - "MyPrivateSubnet"
            - Fn::Join:
              - ""
              # Removing the hyphen from the AZ name and then joining with the subnet name
              - - !Select
                  - 0
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
                - !Select
                  - 1
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
                - !Select
                  - 2
                  - Fn::Split:
                    - "-"
                    - Fn::Sub: "${AZ}"
        RouteTableId: !Ref MyPrivateRouteTable

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${PublicRouteTableName}-${AWS::Region}"

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: !Ref PublicRoute1CIDR
      GatewayId: !Ref MyInternetGateway

  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${PrivateRouteTableName}-${AWS::Region}"

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: !Ref PrivateRoute1CIDR
      NatGatewayId: !Ref MyNatGateway

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and MySQL access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !GetAtt MyVPC.CidrBlock
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref HttpAccessCidr
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${SecurityGroupName}-${AWS::Region}"

  MyRdsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: MySQL
      EngineVersion: 8.0.33
      DBInstanceIdentifier: !Sub "${Environment}-${RdsInstanceName}-${AWS::Region}"
      DBInstanceClass: !Ref DBInstanceClass
      StorageType: gp2
      AllocatedStorage: !Ref DBAllocatedStorage
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabaseUserPassword
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
      - !Ref MySecurityGroup
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${RdsInstanceName}-${AWS::Region}"

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
      - !Ref MyPrivateSubnetuswest1a
      - !Ref MyPrivateSubnetuswest1c

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Environment}-${TargetGroupName}-${AWS::Region}"
      TargetType: instance
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /wp-admin/install.php
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${TargetGroupName}-${AWS::Region}"

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub "${Environment}-${LoadBalancerName}-${AWS::Region}"
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
      - !Ref MySecurityGroup
      Subnets:
      - !Ref MyPublicSubnetuswest1a
      - !Ref MyPublicSubnetuswest1c
      Tags:
      - Key: Name
        Value: !Sub "${Environment}-${LoadBalancerName}-${AWS::Region}"

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-${LaunchTempName}-${AWS::Region}"
      VersionDescription: '1'
      LaunchTemplateData:
        InstanceType: !FindInMap [ EnvironmentConfig, !Ref Environment, InstanceType ]
        KeyName: !Ref KeyName
        ImageId: !FindInMap [ EnvironmentConfig, !Ref Environment, ami ]
        SecurityGroupIds:
        - !Ref MySecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install php7.4 -y
            sudo yum install httpd -y
            sudo yum install mysql -y
            sudo yum install php-mysqlnd php-fpm php-json php-xml php-gd php-mbstring -y
            sudo systemctl enable httpd
            sudo systemctl start httpd
            wget https://wordpress.org/latest.tar.gz
            tar -xvzf latest.tar.gz
            sudo mv wordpress/* /var/www/html/
            sudo chown -R apache:apache /var/www/html/
            sudo systemctl restart httpd
            sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
            sudo sed -i "s/database_name_here/${MyRdsDatabase.DBName}/" /var/www/html/wp-config.php
            sudo sed -i "s/username_here/${MyRdsDatabase.MasterUsername}/" /var/www/html/wp-config.php
            sudo sed -i "s/password_here/${DatabaseUserPassword}/" /var/www/html/wp-config.php
            sudo sed -i "s/localhost/${MyRdsDatabase.Endpoint.Address}/" /var/www/html/wp-config.php
            sudo systemctl restart httpd

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: MyLaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub "${Environment}-${AutoScalingName}-${AWS::Region}"
      AvailabilityZones: !Ref AvailabilityZones
      Cooldown: '300'
      DesiredCapacity: '2'
      DesiredCapacityType: 'units'
      MaxSize: '4'
      MinSize: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: '1'
      VPCZoneIdentifier:
      - !Ref MyPrivateSubnetuswest1a
      - !Ref MyPrivateSubnetuswest1c
      HealthCheckType: 'EC2'
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
      - !Ref MyTargetGroup
      Tags:
      - Key: 'Name'
        Value: !Sub "${Environment}-${AutoScalingName}-${AWS::Region}"
        PropagateAtLaunch: true

  # Add CloudWatch Alarms and Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 80.0

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 40.0

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm to scale up when CPU usage exceeds 80% for 5 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm to scale down when CPU usage is below 40% for 10 minutes"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      Threshold: 40
      ComparisonOperator: LessThanThreshold
      AlarmActions:
      - !Ref ScaleDownPolicy

Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt MyALB.DNSName

  RDSEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt MyRdsDatabase.Endpoint.Address
